library(plyr)
library(dplyr)
library(tidyr)
library(Seurat)
library(stringr)
library(ggplot2)
library(ggpubr)
library(pals)
library(gplots)
library(RColorBrewer)
library(tidyverse)
library(ComplexHeatmap)
library(patchwork)
library(magick)
library(ggimage)

devtools::load_all("C:\\Program Files\\R\\R-4.3.2\\monocle")

# load dataset
cell_annotation = read.table(gzfile("input/GSE131907_Lung_Cancer_cell_annotation.txt.gz"), sep = "\t", header = TRUE)
feature_summary = read.csv("input/GSE131907_Lung_Cancer_Feature_Summary-modify.csv", row.names = 1)

annotation = merge(cell_annotation, feature_summary, by.x = "Sample", by.y = "Samples")
rownames(annotation) = annotation$Index

annotation$rename.Tissue.origins = annotation$Tissue.origins
annotation[annotation$rename.Tissue.origins == "tL/B", ]$rename.Tissue.origins  = "Late-Stage"
annotation[annotation$rename.Tissue.origins == "tLung", ]$rename.Tissue.origins = "Early-Stage"
annotation[annotation$rename.Tissue.origins == "nLung", ]$rename.Tissue.origins = "Normal"
annotation[annotation$rename.Tissue.origins == "Normal",]$Stages = "Normal"

raw_data = readRDS("input/GSE131907_Lung_Cancer_raw_UMI_matrix.rds")
ref_genome = readRDS("input/refgenome_example.Rds")

# Lung tissue subset
lung_tissue_seu = CreateSeuratObject(counts = raw_data, meta.data = annotation, min.cells = 0.001 * ncol(raw_data)) 
lung_tissue_seu = subset(lung_tissue_seu, subset = Tissue.origins %in% c("nLung", "tLung", "tL/B"))

common_genes = intersect(rownames(lung_tissue_seu@assays$RNA$counts), rownames(ref_genome))
lung_tissue_seu  = subset(lung_tissue_seu, features = common_genes)

## Lung tissue subset QC visualization 
lung_tissue_seu[["percent.mt"]] = PercentageFeatureSet(lung_tissue_seu, pattern = "^MT-")
VlnPlot(lung_tissue_seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0) 
lung_tissue_seu = subset(lung_tissue_seu, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
VlnPlot(lung_tissue_seu, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0) 
lung_tissue_seu = NormalizeData(lung_tissue_seu, normalization.method = "LogNormalize", scale.factor = 1e4)
lung_tissue_seu <- FindVariableFeatures(lung_tissue_seu, selection.method = "vst", nfeatures = 3000)
lung_tissue_seu = ScaleData(lung_tissue_seu, do.scale = FALSE, do.center = TRUE, scale.max = 10)
lung_tissue_seu = RunPCA(lung_tissue_seu, features = VariableFeatures(object = lung_tissue_seu))
ElbowPlot(lung_tissue_seu)
lung_tissue_seu <- FindNeighbors(lung_tissue_seu, reduction = "pca", dims = 1:20)
lung_tissue_seu <- FindClusters(lung_tissue_seu, resolution = 0.2) 
lung_tissue_seu <- RunUMAP(lung_tissue_seu, reduction = "pca", dims = 1:20)
DimPlot(lung_tissue_seu, reduction = "umap", label = T)
DimPlot(lung_tissue_seu, reduction = "umap", group.by = "Cell_type", label = T)
DimPlot(lung_tissue_seu, reduction = "umap", group.by = "Tissue.origins", label = T)


# CNV
source("SingleCell-master/R/calInferredCNA_for_CEP.R") ## calculate inferredCNV value
source("SingleCell-master/R/makingTCIDEA_for_CEP.R") ## make TCIDEA object
source("SingleCell-master/R/TCIDEA_obj_for_CEP.R") ## initiate TCIDEA object
source("SingleCell-master/R/calCNVScore_for_CEP.R") ## calculate CNV score (MS, Corr) with CEP result

normal_subset = subset(lung_tissue_seu, subset = Tissue.origins == "nLung")
tumor_subset = subset(lung_tissue_seu, subset = Tissue.origins %in% c("tLung", "tL/B"))

normal_expression = as.matrix(normal_subset@assays$RNA$counts)
normal_annotation = normal_subset@meta.data
normal_annotation_subset = normal_annotation[, c("Index", "Cell_type")]
names(normal_annotation_subset) <- c("Index", "celltype")
rownames(normal_annotation_subset) <- normal_annotation_subset$Index

tumor_expression = as.data.frame(tumor_subset@assays$RNA$counts)
tumor_annotation = tumor_subset@meta.data
tumor_annotation_subset = tumor_annotation[, c("Index", "Cell_type")]
names(tumor_annotation_subset) <- c("Index", "celltype")
rownames(tumor_annotation_subset) <- tumor_annotation_subset$Index

output.dir = paste0(getwd(), "/", "GSE131907_CNV_result")
EP_cutoff = 20 ## count if > 20% of EP -> add
target.celltypes = "Epithelial cells" ## declare name of epithelial cells in metadata
label = "GSE131907_CNV_result"
prop <- as.data.frame(table(tumor_annotation_subset$celltype))
prop$Percent = prop$Freq / nrow(tumor_annotation_subset) * 100

if(prop[prop$Var1 %in% target.celltypes,]$Percent > EP_cutoff){
  list <- addNormalDataset(tumor.data = tumor_expression, tumor.ident = tumor_annotation_subset, target.celltypes = target.celltypes,
                           normal.data = normal_expression)
  addnormal_example <- as.matrix(list$data); addnormal_annotation <- list$ident
  
  runCEP(target.normalized = addnormal_example,  
         sample.info = addnormal_annotation, label = paste0(label,"_AddNormal"),
         annotationdata = ref_genome, target.celltypes = target.celltypes, output.dir = output.dir,
         min.cells = 10, MYwalk = 100) ## Sample list of EP proportion > EP_cutoff (20%)
}else{
  runCEP(target.normalized = tumor_expression,  
         sample.info = tumor_annotation_subset, label = label,
         annotationdata = ref_genome,target.celltypes = target.celltypes, output.dir = output.dir,
         min.cells = 10, MYwalk = 100) ## Sample list of EP proportion <= EP_cutoff (20%)
}

## CNV result visualization
result = readRDS("GSE131907_CNV_result/GSE131907_CNV_result_AddNormal_after_calc_CNV_score.Rds")
ep_cell_info = result[result$celltype == "Epithelial cells",]
ep_cell_info$Samples = str_split_fixed(ep_cell_info$Index, "_", 2)[, 2]
ep_cell_info = left_join(ep_cell_info, feature_summary, by = "Samples")

total_malignant = sum(ep_cell_info$cell_index == "Tumor")
total_nonmalignant =  sum(ep_cell_info$cell_index == "Nontumor")

cat("EP cells, # of malignant:     ",  total_malignant, "/", nrow(ep_cell_info), " = ",
    round(total_malignant/nrow(ep_cell_info) *100, 2) ,"%\n",
    "EP cells, # of non-malignant: ",  total_nonmalignant, "/", nrow(ep_cell_info), " = ",
    round(total_nonmalignant/nrow(ep_cell_info) *100, 2) ,"%")

ep_cell_info %>%
  group_by(Tissue.origins, cell_index) %>%
  summarise(n = n())


cutoff.score = 0.02
cutoff.corr = 0.2

Plot_p0019 = ggplot(ep_cell_info[ep_cell_info$Patient.id == "P0019",],  aes(x=MS, y= COR)) + 
  geom_point(aes(fill=cell_index), size=1.5, alpha=.8, shape=21, colour="black")+ 
  scale_fill_manual(values = c("Tumor"="red","Nontumor"="dodgerblue1")) + 
  geom_vline(xintercept = cutoff.score, colour="black", size=0.5, linetype = "longdash") + 
  geom_hline(yintercept = cutoff.corr, colour="black", size=0.5, linetype = "longdash") +
  xlab("MS score") + ylab("CNV correlation") + 
  labs(title = "One patient (P0019) from Stage IA") +
  theme(plot.title = element_text(hjust = 0.5, face="bold", size = 14),
       axis.title.x = element_text(face="bold", size = 12),
    axis.title.y = element_text(face="bold", size = 12),
    legend.text = element_text(face="bold", size = 14),
    legend.title = element_text(face="bold", size = 14)) + 
  ylim(-0.5, 0.8) + xlim(0, 0.125)

Plot_P0028 = ggplot(ep_cell_info[ep_cell_info$Patient.id == "P0028",],  aes(x=MS, y= COR)) + 
  geom_point(aes(fill=cell_index), size=1.5, alpha=.8, shape=21, colour="black")+ 
  scale_fill_manual(values = c("Tumor"="red","Nontumor"="dodgerblue1")) + 
  geom_vline(xintercept = cutoff.score, colour="black", size=0.5, linetype = "longdash") + 
  geom_hline(yintercept = cutoff.corr, colour="black", size=0.5, linetype = "longdash") +
  xlab("MS score") + ylab("CNV correlation") + 
  labs(title = "One patient (P0028) from Stage IV") +
  theme(plot.title = element_text(hjust = 0.5, face="bold", size = 14),
       axis.title.x = element_text(face="bold", size = 12),
    axis.title.y = element_text(face="bold", size = 12),
    legend.text = element_text(face="bold", size = 14),
    legend.title = element_text(face="bold", size = 14)) +
  ylim(-0.5, 0.8)+ xlim(0, 0.125)

ggarrange(Plot_p0019, Plot_P0028, common.legend = T, legend="bottom")

EP_early_stage = ep_cell_info[ep_cell_info$Tissue.origins == "tLung",]
EP_advan_stage = ep_cell_info[ep_cell_info$Tissue.origins == "tL/B",]

cat("Early stage EP cell total patients: ", length(unique(EP_early_stage$Patient.id)), "\n")
cat("Adv stage EP cell total patients: ", length(unique(EP_advan_stage$Patient.id)), "\n\n")

total_early_malignant = sum(EP_early_stage$cell_index == "Tumor")
total_early_nonmalignant =  sum(EP_early_stage$cell_index == "Nontumor")

cat("EP early stage, # of malignant:     ",  total_early_malignant, "/", nrow(EP_early_stage), " = ",
    round(total_early_malignant/nrow(EP_early_stage) *100, 2) ,"%\n")

cat("EP early stage, # of non-malignant: ",  total_early_nonmalignant, "/", nrow(EP_early_stage), " = ",
    round(total_early_nonmalignant/nrow(EP_early_stage) *100, 2) ,"%")

total_adv_malignant = sum(EP_advan_stage$cell_index == "Tumor")
total_adv_nonmalignant =  sum(EP_advan_stage$cell_index == "Nontumor")

cat("EP early stage, # of malignant:     ",  total_adv_malignant, "/", nrow(EP_advan_stage), " = ",
    round(total_adv_malignant/nrow(EP_advan_stage) *100, 2) ,"%\n")

cat("EP early stage, # of non-malignant: ",  total_adv_nonmalignant, "/", nrow(EP_advan_stage), " = ",
    round(total_adv_nonmalignant/nrow(EP_advan_stage) *100, 2) ,"%")


# LUNG tissure without Undetermined type samples
#lung_tissue_seu_filtered = subset(lung_tissue_seu, subset = Tissue.origins != "nLung")
lung_tissue_seu_filtered = subset(lung_tissue_seu, subset = Cell_type != "Undetermined")
lung_tissue_seu_filtered[["percent.mt"]] = PercentageFeatureSet(lung_tissue_seu_filtered, pattern = "^MT-")
#QC visualization 
VlnPlot(lung_tissue_seu_filtered, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0) 

lung_tissue_seu_filtered = subset(lung_tissue_seu_filtered, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 20)
VlnPlot(lung_tissue_seu_filtered, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size=0) 

lung_tissue_seu_filtered = NormalizeData(lung_tissue_seu_filtered, normalization.method = "LogNormalize", scale.factor = 1e4)
lung_tissue_seu_filtered

lung_tissue_seu_filtered <- FindVariableFeatures(lung_tissue_seu_filtered, selection.method = "vst", nfeatures = 3000)
top10_VariableFeatures <- head(VariableFeatures(lung_tissue_seu_filtered), 10)
plot3 <- VariableFeaturePlot(lung_tissue_seu_filtered)
plot4 <- LabelPoints(plot = plot3, points = top10_VariableFeatures, repel = TRUE)
plot4

lung_tissue_seu_filtered = ScaleData(lung_tissue_seu_filtered, do.scale = FALSE, do.center = TRUE, scale.max = 10)
lung_tissue_seu_filtered = RunPCA(lung_tissue_seu_filtered, features = VariableFeatures(object = lung_tissue_seu_filtered))

ElbowPlot(lung_tissue_seu_filtered)

lung_tissue_seu_filtered <- FindNeighbors(lung_tissue_seu_filtered, reduction = "pca", dims = 1:20)
lung_tissue_seu_filtered <- FindClusters(lung_tissue_seu_filtered, resolution = 0.2) #resolution = 0.02 for level1 of annotation

lung_tissue_seu_filtered <- RunUMAP(lung_tissue_seu_filtered, reduction = "pca", dims = 1:20)

DimPlot(lung_tissue_seu_filtered, reduction = "umap", label = T)
DimPlot(lung_tissue_seu_filtered, reduction = "umap", group.by = "Cell_type", label = T, repel = T) +
  xlim(-15,20) +
  ggtitle("Lung tumor tissue cells UMAP") +
  theme(legend.position = "none",
        legend.text = element_text(size = 22),
        axis.title = element_text(size = 22),
        axis.text = element_text(size = 22),
        text = element_text(size = 22, face = "bold")
  )
DimPlot(lung_tissue_seu_filtered, reduction = "umap", group.by = "rename.Tissue.origins", label = T)

selected_colors = c("#A6CEE3", "#33A02C", "#FF7F00", "#CAB2D6","#B15928")
scales::show_col(selected_colors)


# Lung stromal cells

stromal_subset = subset(lung_tissue_seu_filtered, subset = Cell_type %in% c("Endothelial cells", "Fibroblasts"))

stromal_subset = NormalizeData(stromal_subset, normalization.method = "LogNormalize", scale.factor = 1e4)
stromal_subset <- FindVariableFeatures(stromal_subset, selection.method = "vst", nfeatures = 3000)
top10_VariableFeatures <- head(VariableFeatures(stromal_subset), 10)
plot7 <- VariableFeaturePlot(stromal_subset)
plot8 <- LabelPoints(plot = plot7, points = top10_VariableFeatures, repel = TRUE)

stromal_subset = ScaleData(stromal_subset, do.scale = FALSE, do.center = TRUE, scale.max = 10)
stromal_subset = RunPCA(stromal_subset, features = VariableFeatures(object = stromal_subset))
ElbowPlot(stromal_subset)

stromal_subset <- FindNeighbors(stromal_subset, reduction = "pca", dims = 1:20)
stromal_subset <- FindClusters(stromal_subset, resolution = 0.01) #resolution = 0.02 for level1 of annotation
stromal_subset <- RunUMAP(stromal_subset, reduction = "pca", dims = 1:20)

DimPlot(stromal_subset, reduction = "umap", label = T) +
  ggtitle("UMAP clustering of Stromal cells") + 
  theme(plot.title = element_text(hjust = 0.5))
DimPlot(stromal_subset, reduction = "umap", group.by = "Cell_type", label = T)
DimPlot(stromal_subset, reduction = "umap", group.by = "rename.Tissue.origins", label = T) +
  ggtitle("UMAP clustering of Stromal cells colored by Stages") + 
  scale_color_manual(values = selected_colors[1:3]) + 
  theme(plot.title = element_text(hjust = 0.5))
DimPlot(stromal_subset, reduction = "umap", group.by = "Stages", label = T) + scale_color_manual(values = brewer.pal(n = 7, name = "Dark2"))


stromal_subset_matrix = as.matrix(stromal_subset@assays$RNA$counts)
stromal_subset_ref_genome = ref_genome[rownames(stromal_subset_matrix),]
stromal_subset_ref_genome$gene_short_name = rownames(stromal_subset_ref_genome)

stromal_subset_cell_annotation = stromal_subset@meta.data

stromal_subset_fd <- new("AnnotatedDataFrame", data = stromal_subset_ref_genome)
stromal_subset_pd = new("AnnotatedDataFrame", data = stromal_subset_cell_annotation)

stromal_subset_cds =  newCellDataSet(as(stromal_subset_matrix, "sparseMatrix"),
                              phenoData = stromal_subset_pd, featureData = stromal_subset_fd,
                              expressionFamily = negbinomial.size())
stromal_subset_cds = estimateSizeFactors(stromal_subset_cds)
stromal_subset_cds = estimateDispersions(stromal_subset_cds)
stromal_subset_express_genes = VariableFeatures(stromal_subset)
stromal_subset_cds = setOrderingFilter(stromal_subset_cds, stromal_subset_express_genes)
plot_ordering_genes(stromal_subset_cds)
stromal_subset_cds = reduceDimension(stromal_subset_cds, max_components = 2, method = "DDRTree")
stromal_subset_cds <- orderCells(stromal_subset_cds)
plot_stromal = plot_cell_trajectory(stromal_subset_cds, color_by = "State") + 
  ggtitle("Stromal cells Trajectory") +
  theme(plot.title = element_text(hjust = 0.5))
plot_stromal

stromal_tj_1 = plot_cell_trajectory(stromal_subset_cds, color_by = "rename.Tissue.origins")+ #, cell_size = 4) + 
  scale_color_manual(values = c("turquoise", "#FFD92F", "#A6CEE3")) + facet_wrap(~rename.Tissue.origins)+
  guides(color = guide_legend(title = "Stage", nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") + 
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )

stromal_tj_2 = plot_cell_trajectory(stromal_subset_cds, color_by = "Stages")+ 
  scale_color_manual(values = c("#66C2A5","#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F","#A6CEE3")) +facet_wrap(~Stages)+
  guides(color = guide_legend(nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )

p <- ggarrange(stromal_tj_1, stromal_tj_2, ncol = 2)
p_annotated <- annotate_figure(
  p,
  top = text_grob("Stromal cell trajectory by stages", 
                  face = "bold", size = 18)
)
p_annotated


stromal_subset$State = stromal_subset_cds$State
DimPlot(stromal_subset, reduction = "umap", group.by = "State", label = T)

counts <- stromal_subset@meta.data %>% 
  group_by(State, rename.Tissue.origins) %>%
  dplyr::summarise(Count = n())

# Calculate the total count for each State
total_counts <- stromal_subset@meta.data %>% 
  group_by(State) %>%
  dplyr::summarise(Total = n())

# Merge the total counts with the original counts to get the percentage
counts <- counts %>%
  left_join(total_counts, by = "State") %>%
  mutate(Percentage = (Count / Total) * 100)

# Plot with percentages stacked
ggplot(counts, aes(x = factor(State), y = Percentage, fill = rename.Tissue.origins)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(name = "Stage", values = selected_colors[c(1:3)]) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Trajectory branch", y = "Percentage", fill = "Tissue Origins") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


# immune cells lung tissue
immune_subset = subset(lung_tissue_seu_filtered, subset = Cell_type %in% c("B lymphocytes", "T lymphocytes", "NK cells", "MAST cells", "Myeloid cells"))
immune_subset = NormalizeData(immune_subset, normalization.method = "LogNormalize", scale.factor = 1e4)
immune_subset <- FindVariableFeatures(immune_subset, selection.method = "vst", nfeatures = 3000)
top10_VariableFeatures <- head(VariableFeatures(immune_subset), 10)
plot7 <- VariableFeaturePlot(immune_subset)
plot8 <- LabelPoints(plot = plot7, points = top10_VariableFeatures, repel = TRUE)
plot8

immune_subset = ScaleData(immune_subset, do.scale = FALSE, do.center = TRUE, scale.max = 10)
immune_subset = RunPCA(immune_subset, features = VariableFeatures(object = immune_subset))
ElbowPlot(immune_subset)

immune_subset <- FindNeighbors(immune_subset, reduction = "pca", dims = 1:20)
immune_subset <- FindClusters(immune_subset, resolution = 0.01) #resolution = 0.02 for level1 of annotation
immune_subset <- RunUMAP(immune_subset, reduction = "pca", dims = 1:20)

DimPlot(immune_subset, reduction = "umap", label = T) +ggtitle("UMAP clustering of Immune cells") + theme(plot.title = element_text(hjust = 0.5))
DimPlot(immune_subset, reduction = "umap", group.by = "Cell_type", label = T)
DimPlot(immune_subset, reduction = "umap", group.by = "rename.Tissue.origins", label = T)+ggtitle("UMAP clustering of Immune cells") +
  scale_color_manual(values = selected_colors[1:3]) + 
  theme(plot.title = element_text(hjust = 0.5))

DimPlot(immune_subset, reduction = "umap", group.by = "Stages", label = T, repel = T) + scale_color_manual(values = brewer.pal(n = 7, name = "Dark2"))


tmp <- sample(immune_subset@meta.data$Index, 20000) 
immune_subset8000 <- immune_subset[ ,tmp]

immune_subset_matrix = as.matrix(immune_subset8000@assays$RNA$counts)
immune_subset_ref_genome = ref_genome[rownames(immune_subset_matrix),]
immune_subset_ref_genome$gene_short_name = rownames(immune_subset_ref_genome)

immune_subset_cell_annotation = immune_subset8000@meta.data

immune_subset_fd <- new("AnnotatedDataFrame", data = immune_subset_ref_genome)
immune_subset_pd = new("AnnotatedDataFrame", data = immune_subset_cell_annotation)
immune_subset_cds =  newCellDataSet(as(immune_subset_matrix, "sparseMatrix"),
                              phenoData = immune_subset_pd, featureData = immune_subset_fd,
                              expressionFamily = negbinomial.size())

immune_subset_cds = estimateSizeFactors(immune_subset_cds)
immune_subset_cds = estimateDispersions(immune_subset_cds)

immune_subset_express_genes = VariableFeatures(immune_subset8000)
immune_subset_cds = setOrderingFilter(immune_subset_cds, immune_subset_express_genes)
plot_ordering_genes(immune_subset_cds)

immune_subset_cds = reduceDimension(immune_subset_cds, max_components = 2, method = "DDRTree")

immune_subset_cds <- orderCells(immune_subset_cds)

plot_immune_subset_cds = plot_cell_trajectory(immune_subset_cds, color_by = "State") + 
  ggtitle("Immune cells Trajectory") +
  theme(plot.title = element_text(hjust = 0.5))
plot_immune_subset_cds

immune_tj_1 = plot_cell_trajectory(immune_subset_cds, color_by = "rename.Tissue.origins")+ #, cell_size = 4) + 
  scale_color_manual(values = c("turquoise", "#FFD92F", "#A6CEE3")) + facet_wrap(~rename.Tissue.origins)+
  guides(color = guide_legend(title = "Stage", nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") + 
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )

immune_tj_2 = plot_cell_trajectory(immune_subset_cds, color_by = "Stages")+ 
  scale_color_manual(values = c("#66C2A5","#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F","#A6CEE3")) +facet_wrap(~Stages)+
  guides(color = guide_legend(nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )


p <- ggarrange(stromal_tj_1, stromal_tj_2, ncol = 2)
p_annotated <- annotate_figure(
  p,
  top = text_grob("Stromal cell trajectory by stages", 
                  face = "bold", size = 18, vjust = 2)) +
  theme(
    plot.margin = margin(t = 5, r = 5, b = 15, l = 5)  # 单位默认为 "pt"
  )
p_annotated


immune_tj_1 = immune_tj_1 + theme(plot.margin = margin(t = 5, r = 10, b = 15, l = 5))
immune_tj_2 = immune_tj_2 + theme(plot.margin = margin(t = 5, r = 10, b = 15, l = 5))

p1 <- ggarrange(immune_tj_1, immune_tj_2, ncol = 2)
p1_annotated <- annotate_figure(
  p1,
  top = text_grob("Immune cell trajectory by stages", 
                  face = "bold", size = 18, vjust = 2))
p1_annotated

ggarrange(p_annotated, p1_annotated, ncol = 1)

immune_subset8000$State = immune_subset_cds$State
DimPlot(immune_subset8000, reduction = "umap", group.by = "State", label = T)

counts <- immune_subset8000@meta.data %>% 
  group_by(State, Stages) %>%
  dplyr::summarise(Count = n())

# Calculate the total count for each State
total_counts <- immune_subset8000@meta.data %>% 
  group_by(State) %>%
  dplyr::summarise(Total = n())

# Merge the total counts with the original counts to get the percentage
counts <- counts %>%
  left_join(total_counts, by = "State") %>%
  mutate(Percentage = (Count / Total) * 100)

# Plot with percentages stacked
ggplot(counts, aes(x = factor(State), y = Percentage, fill = Stages)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(values = selected_colors[1:6])+
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Trajectory branch", y = "Percentage", fill = "Stages") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))



save(immune_subset, file="GSE131907_immune_subset.RData")




# EP cells UMAP visualization

epithelial_seu = subset(lung_tissue_seu_filtered, subset = Cell_type == "Epithelial cells")

epithelial_seu@meta.data$cell_index = "Normal"
epithelial_seu@meta.data[epithelial_seu@meta.data$Index %in% result[result$cell_index == "Tumor",]$Index,]$cell_index = "Tumor"
epithelial_seu@meta.data[epithelial_seu@meta.data$Index %in% result[result$cell_index == "Nontumor",]$Index,]$cell_index = "Nontumor"
epithelial_seu = NormalizeData(epithelial_seu, normalization.method = "LogNormalize", scale.factor = 1e4)
epithelial_seu <- FindVariableFeatures(epithelial_seu, selection.method = "vst", nfeatures = 3000)

epithelial_seu = ScaleData(epithelial_seu, do.scale = FALSE, do.center = TRUE, scale.max = 10)
epithelial_seu = RunPCA(epithelial_seu, features = VariableFeatures(object = epithelial_seu))
ElbowPlot(epithelial_seu)

epithelial_seu <- FindNeighbors(epithelial_seu, reduction = "pca", dims = 1:20)
epithelial_seu <- FindClusters(epithelial_seu, resolution = 0.01) #resolution = 0.02 for level1 of annotation
epithelial_seu <- RunUMAP(epithelial_seu, reduction = "pca", dims = 1:20)

DimPlot(epithelial_seu, reduction = "umap", label = T) +
  ggtitle("UMAP clustering of Epithelial cells") + 
  theme(plot.title = element_text(hjust = 0.5))
DimPlot(epithelial_seu, reduction = "umap", group.by = "Stages", label = T, repel = T)
DimPlot(epithelial_seu, reduction = "umap", group.by = "rename.Tissue.origins", label = T) +
  ggtitle("UMAP clustering of Epithelial cells colored by Stages") + 
  scale_color_manual(values = selected_colors[1:3]) + 
  theme(plot.title = element_text(hjust = 0.5))

epithelial_matrix = as.matrix(epithelial_seu@assays$RNA$counts)
dim(epithelial_matrix)

epithelial_ref_genome = ref_genome[rownames(epithelial_matrix),]
epithelial_ref_genome$gene_short_name = rownames(epithelial_ref_genome)

epithelial_cell_annotation = epithelial_seu@meta.data

epithelial_fd <- new("AnnotatedDataFrame", data = epithelial_ref_genome)
epithelial_pd = new("AnnotatedDataFrame", data = epithelial_cell_annotation)

epithelial_cds =  newCellDataSet(as(epithelial_matrix, "sparseMatrix"),
                              phenoData = epithelial_pd, featureData = epithelial_fd,
                              expressionFamily = negbinomial.size())

epithelial_cds = estimateSizeFactors(epithelial_cds)
epithelial_cds = estimateDispersions(epithelial_cds)

epithelial_express_genes = VariableFeatures(epithelial_seu)
epithelial_cds = setOrderingFilter(epithelial_cds, epithelial_express_genes)
plot_ordering_genes(epithelial_cds)

epithelial_cds = reduceDimension(epithelial_cds, max_components = 2, method = "DDRTree")

epithelial_cds <- orderCells(epithelial_cds)

plot_cell_trajectory(epithelial_cds, color_by = "State") + 
  ggtitle("Epithelial cells Trajectory") +
  theme(plot.title = element_text(hjust = 0.5))

epithelial_tj_1 = plot_cell_trajectory(epithelial_cds, color_by = "rename.Tissue.origins")+ #, cell_size = 4) + 
  scale_color_manual(values = c("turquoise", "#FFD92F", "#A6CEE3")) + facet_wrap(~rename.Tissue.origins)+
  guides(color = guide_legend(title = "Stage", nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") + 
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )

epithelial_tj_2 = plot_cell_trajectory(epithelial_cds, color_by = "Stages")+ 
  scale_color_manual(values = c("#66C2A5","#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F","#A6CEE3")) +facet_wrap(~Stages)+
  guides(color = guide_legend(nrow = 1, override.aes = list(size = 3))) +
  ggtitle("") +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5, size = 18),
        legend.title = element_text(size = 18, face = "bold"), 
        legend.text = element_text(size = 18, face = "bold"),
        axis.title.x = element_text(size = 18, face = "bold"),
        axis.text.x = element_text(size = 18, face = "bold"),
        axis.title.y = element_text(size = 18, face = "bold"),
        axis.text.y = element_text(size = 18, face = "bold"),
        strip.text = element_text(size = 18, face = "bold")
  )

p2 <- ggarrange(epithelial_tj_1, epithelial_tj_2, ncol = 2)
p2_annotated <- annotate_figure(
  p2,
  top = text_grob("Epithelial cell trajectory by stages", 
                  face = "bold", size = 18, vjust = 2)) +
  theme(
    plot.margin = margin(t = 5, r = 5, b = 15, l = 5)  # 单位默认为 "pt"
  )
p2_annotated

# Epithelial Malignant cells only

epithelial_filterd_seu = subset(epithelial_seu, subset = cell_index == "Tumor")
epithelial_filterd_seu = NormalizeData(epithelial_filterd_seu, normalization.method = "LogNormalize", scale.factor = 1e4)
epithelial_filterd_seu <- FindVariableFeatures(epithelial_filterd_seu, selection.method = "vst", nfeatures = 3000)
epithelial_filterd_seu = ScaleData(epithelial_filterd_seu, do.scale = FALSE, do.center = TRUE, scale.max = 10)
epithelial_filterd_seu = RunPCA(epithelial_filterd_seu, features = VariableFeatures(object = epithelial_filterd_seu))

ElbowPlot(epithelial_filterd_seu)

epithelial_filterd_seu <- FindNeighbors(epithelial_filterd_seu, reduction = "pca", dims = 1:20)
epithelial_filterd_seu <- FindClusters(epithelial_filterd_seu, resolution = 0.01) #resolution = 0.02 for level1 of annotation

epithelial_filterd_seu <- RunUMAP(epithelial_filterd_seu, reduction = "pca", dims = 1:20)

DimPlot(epithelial_filterd_seu, reduction = "umap", label = T)
DimPlot(epithelial_filterd_seu, reduction = "umap", group.by = "Stages", label = T)
DimPlot(epithelial_filterd_seu, reduction = "umap", group.by = "rename.Tissue.origins", label = T)

### delete stage IV cell in cluster 1 and 4, find DEGs in cluster 0 against all others

ep_clear_subset = subset(epithelial_filterd_seu, subset = seurat_clusters != 4)
ep_clear_subset = subset(ep_clear_subset@meta.data, subset = !(seurat_clusters == 1 & Stages == "IV"))
ep_clear_subset = epithelial_filterd_seu[, rownames(ep_clear_subset)]

filtered_groups <- ep_clear_subset@meta.data %>%
  group_by(seurat_clusters = seurat_clusters, Stages = Stages) %>%
  summarise(n = n(), .groups = 'drop') %>%
  filter(n > 2)

filter_condition <- with(filtered_groups, paste(seurat_clusters, Stages, sep = "_"))
ep_clear_subset@meta.data$filterN = paste(Idents(ep_clear_subset), ep_clear_subset$Stages, sep = "_")
ep_clear_subset <- subset(ep_clear_subset, subset = filterN %in% filter_condition)
DimPlot(ep_clear_subset, reduction = "umap", label = T)
DimPlot(ep_clear_subset, reduction = "umap", group.by = "rename.Tissue.origins", label = T)
DimPlot(ep_clear_subset, reduction = "umap", group.by = "Stages", label = T)



ep_clear_subset_matrix = as.matrix(ep_clear_subset@assays$RNA$counts)
ep_clear_subset_ref_genome = ref_genome[rownames(ep_clear_subset_matrix),]
ep_clear_subset_ref_genome$gene_short_name = rownames(ep_clear_subset_ref_genome)
ep_clear_subset_cell_annotation = ep_clear_subset@meta.data
ep_clear_subset_fd <- new("AnnotatedDataFrame", data = ep_clear_subset_ref_genome)
ep_clear_subset_pd = new("AnnotatedDataFrame", data = ep_clear_subset_cell_annotation)
ep_clear_subset_cds =  newCellDataSet(as(ep_clear_subset_matrix, "sparseMatrix"),
                              phenoData = ep_clear_subset_pd, featureData = ep_clear_subset_fd,
                              expressionFamily = negbinomial.size())
ep_clear_subset_cds = estimateSizeFactors(ep_clear_subset_cds)
ep_clear_subset_cds = estimateDispersions(ep_clear_subset_cds)
ep_clear_subset_express_genes = VariableFeatures(ep_clear_subset)
ep_clear_subset_cds = setOrderingFilter(ep_clear_subset_cds, ep_clear_subset_express_genes)
ep_clear_subset_cds = reduceDimension(ep_clear_subset_cds, max_components = 2, method = "DDRTree")
ep_clear_subset_cds <- orderCells(ep_clear_subset_cds)
plot_cell_trajectory(ep_clear_subset_cds, color_by = "State") + 
  ggtitle("EP early and late stage cells Trajectory") +
  theme(plot.title = element_text(hjust = 0.5))

plot_cell_trajectory(ep_clear_subset_cds, color_by = "rename.Tissue.origins")+ #, cell_size = 4) + 
  scale_color_manual(values = selected_colors[1:3]) +facet_wrap(~rename.Tissue.origins)+
  guides(color = guide_legend(title = "Stage")) +
  theme(legend.position = "right",
        legend.title = element_text(size = 22),  # , face = "bold"),
        legend.text = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        axis.text.x = element_text(size = 22),
        axis.title.y = element_text(size = 22),
        axis.text.y = element_text(size = 22)
        )

plot_cell_trajectory(ep_clear_subset_cds, color_by = "Stages")+#, cell_size = 4) + 
  scale_color_manual(values = selected_colors[1:6]) +facet_wrap(~Stages)+
  guides(color = guide_legend(title = "Stages", override.aes = list(size = 5))) +
  theme(legend.position = "right",
        legend.title = element_text(size = 22),  # , face = "bold"),
        legend.text = element_text(size = 22),
        axis.title.x = element_text(size = 22),
        axis.text.x = element_text(size = 22),
        axis.title.y = element_text(size = 22),
        axis.text.y = element_text(size = 22)
        )

ep_clear_subset$State = ep_clear_subset_cds$State
DimPlot(ep_clear_subset, reduction = "umap", group.by = "State", label = T)

counts <- ep_clear_subset@meta.data %>% 
  group_by(State, Stages) %>%
  dplyr::summarise(Count = n())

# Calculate the total count for each State
total_counts <- ep_clear_subset@meta.data %>% 
  group_by(State) %>%
  dplyr::summarise(Total = n())

# Merge the total counts with the original counts to get the percentage
counts <- counts %>%
  left_join(total_counts, by = "State") %>%
  mutate(Percentage = (Count / Total) * 100)

# Plot with percentages stacked
ggplot(counts, aes(x = factor(State), y = Percentage, fill = Stages)) +
  geom_bar(stat = "identity", position = "fill") +
  scale_fill_manual(values = selected_colors[1:6])+
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Trajectory branch", y = "Percentage", fill = "Stages") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

DEGs_0_before_wilcox <- FindMarkers(object = ep_clear_subset, ident.1 = 0, ident.2 = NULL,test.use = "wilcox", min.pct = 0.25, logfc.threshold = 0.25)
DEGs_0_wilcox <- DEGs_0_before_wilcox[DEGs_0_before_wilcox$p_val < 0.01 & DEGs_0_before_wilcox$p_val_adj < 0.01 & DEGs_0_before_wilcox$avg_log2FC > 1,]
write.csv(DEGs_0_wilcox, file = "DEGs_0_wilcox.csv")

# InferCNV
library("AnnoProbe")
dat <- GetAssayData(ep_clear_subset,assay = "RNA",slot = "counts")
dat <- as.data.frame(dat)

geneInfor=annoGene(rownames(dat),"SYMBOL",'human')   
colnames(geneInfor)
geneInfor=geneInfor[with(geneInfor, order(chr, start)),c(1,4:6)]      
geneInfor=geneInfor[!duplicated(geneInfor[,1]),]
length(unique(geneInfor[,1]))
head(geneInfor)

dat=dat[match(geneInfor[,1], rownames(dat)),]    
rownames(geneInfor) <- geneInfor$SYMBOL   
geneInfor <- geneInfor[,-1]  


meta <- subset(scRNA_harmony@meta.data,select = c("seurat_clusters"))   
meta$seurat_clusters <- as.character(meta$seurat_clusters)
meta$seurat_clusters[meta$seurat_clusters == "0"] <- "Stage_IV"
meta$seurat_clusters[meta$seurat_clusters == "1"] <- "Stage_IA_IB_IIA"
meta$seurat_clusters[meta$seurat_clusters == "2"] <- "Stage_IA3"
meta$seurat_clusters[meta$seurat_clusters == "3"] <- "Stage_IIIA"
meta$seurat_clusters <- factor(meta$seurat_clusters, 
                               levels = c("Stage_IV", "Stage_IIIA", "Stage_IA_IB_IIA", "Stage_IA3"))

identical(colnames(dat),rownames(meta))  
identical(rownames(dat),rownames(geneInfor))

infercnv_obj = CreateInfercnvObject(raw_counts_matrix=dat,
                                    annotations_file=meta,
                                    delim="\t",
                                    gene_order_file=geneInfor,
                                    ref_group_names=NULL)
infercnv_obj = infercnv::run(infercnv_obj,
                             cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics
                             out_dir="GSE131907_InferCNV_rename_3/", 
                             cluster_by_groups=TRUE, 
                             denoise=F,
                             num_threads=6,
                             HMM=F)

